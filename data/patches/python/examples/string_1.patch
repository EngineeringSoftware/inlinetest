diff --git a/versioneer.py b/versioneer.py
index 518e17eec..a8106b377 100644
--- a/versioneer.py
+++ b/versioneer.py
@@ -279,6 +279,7 @@ import os
 import re
 import subprocess
 import sys
+from inline import Here
 
 
 class VersioneerConfig:
@@ -983,6 +984,7 @@ def git_versions_from_keywords(keywords, tag_prefix, verbose):
         # discover which version we're using, or to work around using an
         # older one.
         date = date.strip().replace(" ", "T", 1).replace(" ", "", 1)
+        Here().given(date, "2020-07-10 15:00:00.000").check_eq(date, "2020-07-10T15:00:00.000")
     refnames = keywords["refnames"].strip()
     if refnames.startswith("$Format"):
         if verbose:
@@ -993,6 +997,8 @@ def git_versions_from_keywords(keywords, tag_prefix, verbose):
     # just "foo-1.0". If we see a "tag: " prefix, prefer those.
     TAG = "tag: "
     tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])
+    Here().given(refs, ["tag: foo-1.0", "tag: bar-3.2"]).given(TAG, "tag: ").check_eq(tags, {"foo-1.0", "bar-3.2"})
+    Here().given(refs, ["foo-1.0", "bar-3.2"]).given(TAG, "tag: ").check_eq(tags, set())
     if not tags:
         # Either we're using git < 1.8.3, or there really are no tags. We use
         # a heuristic: assume all version tags have a digit. The old git %d
@@ -1002,6 +1010,7 @@ def git_versions_from_keywords(keywords, tag_prefix, verbose):
         # filter out many common branch names like "release" and
         # "stabilization", as well as "HEAD" and "master".
         tags = set([r for r in refs if re.search(r'\d', r)])
+        Here().given(refs, ["foo-1.0", "bar-3.2", "release", "stabilization", "master"]).check_eq(tags, {"foo-1.0", "bar-3.2"})
         if verbose:
             print("discarding '%s', no digits" % ",".join(refs - tags))
     if verbose:
